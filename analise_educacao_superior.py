import streamlit as st
import pandas as pd
import plotly.express as px
import os 

# --- Configura√ß√µes Iniciais do Streamlit ---
# Define o layout da p√°gina para ser amplo e o t√≠tulo que aparece na aba do navegador.
st.set_page_config(layout="wide", page_title="Educa√ß√£o Superior RIDE/DF")

# T√≠tulo principal do aplicativo
st.title("üéì An√°lise da Educa√ß√£o Superior na RIDE/DF - 2023")
# Descri√ß√£o introdut√≥ria
st.markdown("Este painel interativo permite explorar dados sobre institui√ß√µes e docentes de ensino superior na Regi√£o Integrada de Desenvolvimento do Distrito Federal e Entorno (RIDE/DF).")

# --- Fun√ß√£o para Carregar e Pr√©-processar os Dados ---
# Usa @st.cache_data para armazenar em cache o DataFrame.
# Isso evita que os dados sejam recarregados e processados toda vez que o usu√°rio interage com o app,
# tornando-o muito mais r√°pido.
@st.cache_data
def carregar_dados():
   
    try:
        # Define o nome do arquivo CSV
        csv_file_name = "table_EDUCACAO_SUPERIOR_RIDE_DF.csv"
        
        # Constr√≥i o caminho completo para o CSV usando o diret√≥rio do script atual
        script_dir = os.path.dirname(__file__)
        csv_file_path_absolute = os.path.join(script_dir, csv_file_name)
        
        # DEBUG: Imprime o caminho completo que o script est√° tentando acessar (na UI do Streamlit)
        #st.info(f"Tentando carregar o CSV de: `{csv_file_path_absolute}`")
        
        # Verifica se o arquivo existe antes de tentar carregar
        if not os.path.exists(csv_file_path_absolute):
            st.error(f"Erro: O arquivo '{csv_file_name}' n√£o foi encontrado.")
            st.error(f"Por favor, coloque o arquivo CSV na mesma pasta do 'app.py'."
                     f" O caminho absoluto que o script esperava encontrar o CSV √©: `{csv_file_path_absolute}`")
            return pd.DataFrame() # Retorna um DataFrame vazio para evitar erros posteriores

        # Carrega o CSV usando o separador ';' e codifica√ß√£o 'utf-8'
        df = pd.read_csv(csv_file_path_absolute, sep=';', encoding='utf-8')
        
        # --- Verifica√ß√£o de Colunas Essenciais ---
        # Lista de nomes de colunas esperados no arquivo CSV original.
        required_original_cols = [
            'NU_ANO_CENSO', 'CO_MUNICIPIO_IES', 'nome_municipio', 'IN_CAPITAL_IES',
            'TP_ORGANIZACAO_ACADEMICA', 'TP_REDE', 'TP_CATEGORIA_ADMINISTRATIVA',
            'NO_IES', 'SG_IES', 'QT_DOC_TOTAL', 'QT_TEC_TOTAL', 'NO_MANTENEDORA',
            'QT_DOC_EX_SEM_GRAD', 'QT_DOC_EX_GRAD', 'QT_DOC_EX_ESP',
            'QT_DOC_EX_MEST', 'QT_DOC_EX_DOUT',
            'QT_LIVRO_ELETRONICO', 
            'QT_DOC_EX_FEMI', 
            'QT_DOC_EX_MASC' , 'QT_DOC_EX_0_29','QT_DOC_EX_30_34','QT_DOC_EX_35_39','QT_DOC_EX_40_44',
            'QT_DOC_EX_45_49',
            'QT_DOC_EX_50_54',
            'QT_DOC_EX_55_59',
            'QT_DOC_EX_60_MAIS',
        ]
        
        missing_cols = [col for col in required_original_cols if col not in df.columns]
        if missing_cols:
            st.error(f"Erro: As seguintes colunas essenciais n√£o foram encontradas no arquivo CSV: {', '.join(missing_cols)}."
                     f" Verifique se o arquivo est√° correto e se os nomes das colunas correspondem (sens√≠vel a mai√∫sculas/min√∫sculas).")
            return pd.DataFrame()

        # Renomeia colunas para nomes mais amig√°veis
        df.rename(columns={
            'NU_ANO_CENSO': 'Ano do Censo',
            'nome_municipio': 'Munic√≠pio',
            'IN_CAPITAL_IES': '√â Capital?',
            'TP_ORGANIZACAO_ACADEMICA': 'Organiza√ß√£o Acad√™mica',
            'TP_REDE': 'Tipo de Rede',
            'TP_CATEGORIA_ADMINISTRATIVA': 'Categoria Administrativa',
            'NO_MANTENEDORA': 'Mantenedora',
            'NO_IES': 'Nome da IES',
            'SG_IES': 'Sigla da IES',
            'QT_DOC_TOTAL': 'Total de Docentes',
            'QT_TEC_TOTAL': 'Total de T√©cnicos',
            # Renomear colunas de docentes por n√≠vel de forma√ß√£o
            'QT_DOC_EX_SEM_GRAD': 'Docentes Sem Gradua√ß√£o',
            'QT_DOC_EX_GRAD': 'Docentes com Gradua√ß√£o',
            'QT_DOC_EX_ESP': 'Docentes com Especializa√ß√£o',
            'QT_DOC_EX_MEST': 'Docentes com Mestrado',
            'QT_DOC_EX_DOUT': 'Docentes com Doutorado',
            'QT_LIVRO_ELETRONICO': 'Total de Livros Eletr√¥nicos', 
            'QT_DOC_EX_FEMI': 'Docentes Feminino', 
            'QT_DOC_EX_MASC': 'Docentes Masculino' ,
        
        }, inplace=True)

        # Preencher valores NaN (Not a Number) em colunas num√©ricas de contagem com 0.
        numeric_cols_to_fill = [
            'Total de Docentes', 'Total de T√©cnicos',
            'Docentes Sem Gradua√ß√£o', 'Docentes com Gradua√ß√£o', 'Docentes com Especializa√ß√£o',
            'Docentes com Mestrado', 'Docentes com Doutorado',
            'Total de Livros Eletr√¥nicos', 'Docentes Feminino', 'Docentes Masculino' # Novas colunas
        ]
        for col in numeric_cols_to_fill:
            if col in df.columns: 
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0) 

        # Mapear valores num√©ricos para descri√ß√µes textuais mais compreens√≠veis em colunas categ√≥ricas
        if '√â Capital?' in df.columns:
            df['√â Capital?'] = df['√â Capital?'].map({1: 'Sim', 0: 'N√£o'}).fillna('N√£o Definido')
        
        if 'Organiza√ß√£o Acad√™mica' in df.columns:
            organizacao_map = {
                1: 'Universidade', 2: 'Centro Universit√°rio',
                3: 'Faculdade', 4: 'Instituto Federal de Educa√ß√£o, Ci√™ncia e Tecnologia (IF)',
                5: 'Centro Federal de Educa√ß√£o Tecnol√≥gica (CEFET)',
                99: 'Outra' 
            }
            df['Organiza√ß√£o Acad√™mica'] = df['Organiza√ß√£o Acad√™mica'].map(organizacao_map).fillna('N√£o Definido')

        if 'Tipo de Rede' in df.columns:
            rede_map = {1: 'P√∫blica', 2: 'Privada'}
            df['Tipo de Rede'] = df['Tipo de Rede'].map(rede_map).fillna('N√£o Definido')

        if 'Categoria Administrativa' in df.columns:
            categoria_map = {
                1: 'P√∫blica Federal', 2: 'P√∫blica Estadual', 3: 'P√∫blica Municipal',
                4: 'Privada com fins lucrativos', 5: 'Privada sem fins lucrativos', 6: 'Privada - Particular em sentido estrito',
                7: 'Especial', 8: 'Privada comunit√°ria', 9: 'Privada confessional'
            }
            df['Categoria Administrativa'] = df['Categoria Administrativa'].map(categoria_map).fillna('N√£o Definido')

        return df
    
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado ao carregar ou processar os dados: {e}")
        st.info("Verifique se o arquivo CSV est√° no formato correto (separador ';', codifica√ß√£o 'utf-8') e se n√£o h√° problemas de dados.")
        return pd.DataFrame() 

# Carrega os dados uma vez (ou do cache)
df = carregar_dados()

# --- Bloco Principal da Aplica√ß√£o Streamlit ---
if not df.empty:
    # --- Sidebar com Filtros ---
    st.sidebar.header("üîé Filtros Interativos")
    st.sidebar.markdown("Selecione as op√ß√µes abaixo para filtrar os dados em todo o painel.")

    

    if "Organiza√ß√£o Acad√™mica" in df.columns:
        organizacoes = sorted(df["Organiza√ß√£o Acad√™mica"].unique())
        organizacao_sel = st.sidebar.selectbox("Organiza√ß√£o Acad√™mica", ['Todas'] + list(organizacoes))
    else:
        st.sidebar.warning("Coluna 'Organiza√ß√£o Acad√™mica' n√£o dispon√≠vel para filtragem.")
        organizacao_sel = 'Todas' 

    if "Tipo de Rede" in df.columns:
        tipos_rede = sorted(df["Tipo de Rede"].unique())
        tipo_rede_sel = st.sidebar.selectbox("Tipo de Rede", ['Todas'] + list(tipos_rede))
    else:
        st.sidebar.warning("Coluna 'Tipo de Rede' n√£o dispon√≠vel para filtragem.")
        tipo_rede_sel = 'Todas' 

    if "Munic√≠pio" in df.columns:
        municipios = sorted(df["Munic√≠pio"].unique())
        municipio_sel = st.sidebar.selectbox("Munic√≠pio", ['Todos'] + list(municipios))
    else:
        st.sidebar.warning("Coluna 'Munic√≠pio' n√£o dispon√≠vel para filtragem.")
        municipio_sel = 'Todos' 



    # --- Aplica√ß√£o dos Filtros ao DataFrame ---
    df_filtrado = df.copy() 


    if organizacao_sel != 'Todas' and "Organiza√ß√£o Acad√™mica" in df_filtrado.columns:
        df_filtrado = df_filtrado[df_filtrado["Organiza√ß√£o Acad√™mica"] == organizacao_sel]
        
    if tipo_rede_sel != 'Todas' and "Tipo de Rede" in df_filtrado.columns:
        df_filtrado = df_filtrado[df_filtrado["Tipo de Rede"] == tipo_rede_sel]
        
    if municipio_sel != 'Todos' and "Munic√≠pio" in df_filtrado.columns:
        df_filtrado = df_filtrado[df_filtrado["Munic√≠pio"] == municipio_sel]
        

    # --- Verifica√ß√£o de DataFrame Filtrado Vazio ---
    if df_filtrado.empty:
        st.info("Nenhum registro encontrado para os filtros selecionados. Por favor, ajuste os filtros na barra lateral.")
    else:
        # --- VALORES CHAVE (Key Metrics) ---
        st.subheader("üí° M√©tricas Chave")
        
        total_ies = df_filtrado['Nome da IES'].nunique() if 'Nome da IES' in df_filtrado.columns else 0
        total_docentes_ex = df_filtrado['Total de Docentes'].sum() if 'Total de Docentes' in df_filtrado.columns else 0
        total_municipios_c_ies = df_filtrado['Munic√≠pio'].nunique() if 'Munic√≠pio' in df_filtrado.columns else 0
        total_tecnicos = df_filtrado['Total de T√©cnicos'].sum() if 'Total de T√©cnicos' in df_filtrado.columns else 0

        
        col1, col2, col3, col4 = st.columns(4) 
        with col1:
            st.metric(label="Total de IES", value=total_ies)
        with col2:
            st.metric(label="Total de Docentes", value=f"{total_docentes_ex:,.0f}".replace(",", "X").replace(".", ",").replace("X", "."))
        with col3:
            st.metric(label="Munic√≠pios c/ IES", value=total_municipios_c_ies)
        with col4: # Nova m√©trica
            st.metric(label="Total de T√©cnico-administrativos", value=f"{total_tecnicos:,.0f}".replace(",", "X").replace(".", ",").replace("X", "."))


        # --- PR√âVIA DOS DADOS ---
        st.subheader("üìã Pr√©via dos Dados Filtrados")
        st.write(f"Exibindo os primeiros **{min(10, len(df_filtrado))}** registros de **{len(df_filtrado)}** (de um total de **{len(df)}**).")
        st.dataframe(df_filtrado.head(10)) 

        # --- GR√ÅFICOS E VISUALIZA√á√ïES ---
        st.subheader("üìä Visualiza√ß√µes e Gr√°ficos")

        # 1. Modelo de Gr√°fico de Barras: Total de IES por Munic√≠pio
        if "Munic√≠pio" in df_filtrado.columns and "Nome da IES" in df_filtrado.columns and not df_filtrado.empty:
                st.markdown("##### Total de IES por Munic√≠pio")
                ies_por_municipio = df_filtrado.groupby("Munic√≠pio")['Nome da IES'].nunique().reset_index(name="Total de IES")
                ies_por_municipio = ies_por_municipio.sort_values("Total de IES", ascending=False)
                
                fig_ies_municipio = px.bar(
                    ies_por_municipio, 
                    x="Munic√≠pio", 
                    y="Total de IES", 
                    text="Total de IES", 
                    labels={"Total de IES": "N√∫mero de Institui√ß√µes", "Munic√≠pio": "Munic√≠pio"},
                    color_discrete_sequence=['#2C5E8A'] # Cor alterada para '#2C5E8A'
                )
                fig_ies_municipio.update_traces(textposition='outside') 
                fig_ies_municipio.update_layout(xaxis_title="Munic√≠pio", yaxis_title="Total de IES", hovermode="x unified")
                st.plotly_chart(fig_ies_municipio, use_container_width=True)


        if "Organiza√ß√£o Acad√™mica" in df_filtrado.columns:
                st.markdown("##### Quantidade de Organiza√ß√µes Acad√™micas")
                org_acad_freq = df_filtrado["Organiza√ß√£o Acad√™mica"].value_counts().reset_index()
                org_acad_freq.columns = ["Organiza√ß√£o Acad√™mica", "Frequ√™ncia"]
                org_acad_freq = org_acad_freq.sort_values("Frequ√™ncia", ascending=True)

                fig_org_acad = px.bar(
                    org_acad_freq,
                    x="Frequ√™ncia",
                    y="Organiza√ß√£o Acad√™mica",
                    orientation="h",
                    text="Frequ√™ncia",
                    color_discrete_sequence=["#2C5E8A"]
                )
                fig_org_acad.update_traces(textposition="outside")
                fig_org_acad.update_layout(
                    xaxis_title="Frequ√™ncia",
                    yaxis_title="Organiza√ß√£o Acad√™mica",
                    hovermode="y unified"
                )
                st.plotly_chart(fig_org_acad, use_container_width=True)
        else:
            st.warning("N√£o foi poss√≠vel gerar 'Total de IES por Munic√≠pio': Colunas necess√°rias ausentes ou dados filtrados vazios.")

        # 2. Novo Gr√°fico de Barras: Quantidade total de t√©cnicos por Mantenedora
        if "Mantenedora" in df_filtrado.columns and "Total de T√©cnicos" in df_filtrado.columns and not df_filtrado.empty:
            st.markdown("##### Quantidade Total de T√©cnicos por Mantenedora")
            tec_por_mantenedora = df_filtrado.groupby("Mantenedora")["Total de T√©cnicos"].sum().reset_index()
            tec_por_mantenedora = tec_por_mantenedora.sort_values("Total de T√©cnicos", ascending=True)

            fig_tec_mantenedora = px.bar(
                tec_por_mantenedora,
                x="Total de T√©cnicos", 
                y="Mantenedora",     
                orientation='h',     
                text="Total de T√©cnicos", 
                labels={"Total de T√©cnicos": "Quantidade Total de T√©cnicos", "Mantenedora": "Nome da Mantenedora"},
                  color_discrete_map={
                    'Total de T√©cnicos':'#2C5E8A', # Tom de azul mais escuro
                                },
            )
            fig_tec_mantenedora.update_traces(textposition='outside')
            fig_tec_mantenedora.update_layout(xaxis_title="Quantidade Total de T√©cnicos", yaxis_title="Mantenedora", hovermode="y unified")
            st.plotly_chart(fig_tec_mantenedora, use_container_width=True)
        else:
            st.warning("N√£o foi poss√≠vel gerar 'Quantidade Total de T√©cnicos por Mantenedora': Colunas necess√°rias ausentes ou dados filtrados vazios.")


        # 3. NOVO GR√ÅFICO: Quantidade de Docentes por Sexo em Organiza√ß√£o Acad√™mica 
        if all(col in df_filtrado.columns for col in ["Organiza√ß√£o Acad√™mica", "Docentes Feminino", "Docentes Masculino"]) and not df_filtrado.empty:
            
            # Agrupa os dados por Organiza√ß√£o Acad√™mica e soma os docentes femininos e masculinos
            docentes_por_org_e_sexo = df_filtrado.groupby('Organiza√ß√£o Acad√™mica')[[
                'Docentes Feminino', 
                'Docentes Masculino'
            ]].sum().reset_index()

            # Transforma o DataFrame para o formato "long" para que o Plotly Express possa criar barras agrupadas
            docentes_long = docentes_por_org_e_sexo.melt(
                id_vars=['Organiza√ß√£o Acad√™mica'], 
                value_vars=['Docentes Feminino', 'Docentes Masculino'],
                var_name='Sexo', 
                value_name='Quantidade de Docentes'
            )

            # Calcular o total de docentes para esta visualiza√ß√£o
            total_docentes_para_grafico = docentes_long['Quantidade de Docentes'].sum()
            
            # --- Layout para T√≠tulo e M√©trica ---
            st.markdown("#### Quantidade de Docentes do sexo feminino, Quantidade de docentes do sexo masculino por Organiza√ß√£o Acad√™mica")
            
            # Usando colunas para a m√©trica total e o t√≠tulo da sub-se√ß√£o do gr√°fico
            col_total_docentes, col_sub_titulo_grafico = st.columns([0.25, 0.75])

            with col_total_docentes:
                # c√≠rculo

                st.markdown(f"""
                <div style="
                    border: 4px solid #3366CC; 
                    border-radius: 50%; 
                    width: 150px; 
                    height: 150px; 
                    display: flex; 
                    flex-direction: column; 
                    justify-content: center; 
                    align-items: center; 
                    margin: 20px auto;
                    color: {'white' if st.config.get_option('theme.base') == 'dark' else 'black'};
                    background-color: {'#0E1117' if st.config.get_option('theme.base') == 'dark' else 'white'};
                    text-align: center;
                ">
                    <span style="font-size: 14px;">Quantidade total de docentes</span>
                    <span style="font-size: 24px; font-weight: bold;">{f'{total_docentes_para_grafico / 1000:,.1f}'.replace(",", "X").replace(".", ",").replace("X", ".")} mil</span>
                </div>
                """, unsafe_allow_html=True)

            with col_sub_titulo_grafico:
                st.markdown("##### Quantidade de docentes do sexo feminino / Quantidade de docentes do sexo masculino")


            # Ordena a coluna 'Organiza√ß√£o Acad√™mica' para uma apresenta√ß√£o consistente no eixo X
            docentes_long['Organiza√ß√£o Acad√™mica'] = pd.Categorical(
                docentes_long['Organiza√ß√£o Acad√™mica'], 
                categories=sorted(docentes_long['Organiza√ß√£o Acad√™mica'].unique()), 
                ordered=True
            )

            # Define a ordem das categorias 'Sexo' para que as barras sejam sempre exibidas na mesma sequ√™ncia
            category_orders = {
                "Sexo": ['Docentes Feminino', 'Docentes Masculino'],
                "Organiza√ß√£o Acad√™mica": sorted(docentes_long['Organiza√ß√£o Acad√™mica'].unique())
            }

            fig_docentes_org_sexo = px.bar(
                docentes_long, 
                x='Organiza√ß√£o Acad√™mica', 
                y='Quantidade de Docentes',
                color='Sexo', # Cria as barras agrupadas por sexo
                barmode='group', # Garante que as barras sejam agrupadas
                # O t√≠tulo principal acima, este √© um subt√≠tulo visual
                labels={
                    "Organiza√ß√£o Acad√™mica": "Organiza√ß√£o Acad√™mica", 
                    "Quantidade de Docentes": "Quantidade de Docentes",
                    "Sexo": "Sexo do Docente"
                },
                color_discrete_map={
                    'Docentes Feminino': '#2C5E8A', # Tom de azul mais escuro
                    'Docentes Masculino': '#5FAEEB'  # Tom de azul mais claro
                },
                category_orders=category_orders 
            )
            # Formata√ß√£o dos n√∫meros nas barras para "mil" e posicionamento externo
            fig_docentes_org_sexo.update_traces(texttemplate='%{y:,.1s}', textposition='outside')
            
            fig_docentes_org_sexo.update_layout(
                xaxis_title="Organiza√ß√£o Acad√™mica", 
                yaxis_title="", # Eixo Y sem t√≠tulo para replicar a imagem
                hovermode="x unified",
                # Posicionamento da legenda abaixo do gr√°fico
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=-0.2, # Ajusta para ficar abaixo do gr√°fico
                    xanchor="center",
                    x=0.10, # Centraliza horizontalmente
                    title_text="" # Remove o t√≠tulo da legenda
                )
            )
            st.plotly_chart(fig_docentes_org_sexo, use_container_width=True)
        else:
            st.warning("N√£o foi poss√≠vel gerar 'Quantidade de Docentes por Sexo e Organiza√ß√£o Acad√™mica': Colunas necess√°rias ausentes ou dados filtrados vazios.")


        # 4. Modelo de Gr√°fico de Pizza: Distribui√ß√£o de Institui√ß√µes por Categoria Administrativa 
        if "Categoria Administrativa" in df_filtrado.columns and not df_filtrado.empty:
            st.markdown("##### Distribui√ß√£o de Institui√ß√µes por Categoria Administrativa")
            cat_admin_counts = df_filtrado['Categoria Administrativa'].value_counts().reset_index()
            cat_admin_counts.columns = ['Categoria Administrativa', 'N√∫mero de IES']
            
            # Ordenar os dados em ordem decrescente pelo 'N√∫mero de IES'
            cat_admin_counts = cat_admin_counts.sort_values(by='N√∫mero de IES', ascending=False)

            fig_cat_admin = px.pie(
                cat_admin_counts, 
                values='N√∫mero de IES', 
                names='Categoria Administrativa', 
                hole=0, 
                height=600, # Aumenta a altura do gr√°fico
                # Cores em tons de azul conforme solicitado (e uma cor extra para 'Outras Categorias')
                color_discrete_sequence=['#2470AD', '#33A3FF', '#7DC3FC', '#C7E3F9', '#1A4B7D'] 
            )
            fig_cat_admin.update_traces(textposition='inside', textinfo='percent') # Mostra percentual e label dentro das fatias
            # Aumenta o tamanho da legenda
            fig_cat_admin.update_layout(
              legend=dict(
               font=dict(size=18)
              )
            )
            st.plotly_chart(fig_cat_admin, use_container_width=True)
        else:
          st.warning("N√£o foi poss√≠vel gerar 'Distribui√ß√£o de Institui√ß√µes por Categoria Administrativa': Coluna 'Categoria Administrativa' ausente ou dados filtrados vazios.")


        # 6. Modelo de Gr√°fico de Barras: Total de Docentes por N√≠vel de Forma√ß√£o
        docentes_cols_for_plot = [
            'Docentes Sem Gradua√ß√£o', 
            'Docentes com Gradua√ß√£o', 
            'Docentes com Especializa√ß√£o',
            'Docentes com Mestrado', 
            'Docentes com Doutorado'
        ]

        if all(col in df_filtrado.columns for col in docentes_cols_for_plot) and not df_filtrado.empty:
                st.markdown("##### Total de Docentes por N√≠vel de Forma√ß√£o")
                
                docentes_resumo_filtrado = df_filtrado[docentes_cols_for_plot].sum().reset_index()
                docentes_resumo_filtrado.columns = ['N√≠vel de Forma√ß√£o', 'Total de Docentes']
                docentes_resumo_filtrado = docentes_resumo_filtrado.sort_values(by='Total de Docentes', ascending=False)
                
                docentes_por_tipo = df_filtrado.groupby('Tipo de Rede')[docentes_cols_for_plot].sum().reset_index()

                docentes_melted = docentes_por_tipo.melt(
                id_vars='Tipo de Rede', 
                var_name='N√≠vel de Forma√ß√£o', 
                value_name='Quantidade'
               )
                ordem_formacao = [
                'Docentes com Doutorado',
                'Docentes com Gradua√ß√£o',
                'Docentes Sem Gradua√ß√£o',
                'Docentes com Especializa√ß√£o',
                'Docentes com Mestrado'
            ]
                
                docentes_melted['N√≠vel de Forma√ß√£o'] = pd.Categorical(
                    docentes_melted['N√≠vel de Forma√ß√£o'], 
                    categories=ordem_formacao, 
                    ordered=True
                )


                # Cores personalizadas para os n√≠veis de forma√ß√£o
                cores = {
                     'Docentes com Doutorado': '#1f5aa5',        # azul escuro
                    'Docentes com Gradua√ß√£o': '#2e7cd1',
                    'Docentes Sem Gradua√ß√£o': '#36a2e0',
                    'Docentes com Especializa√ß√£o': '#6ec3ee',
                    'Docentes com Mestrado': '#c6e4f8'          # azul bem claro
                }

                fig = px.bar(
                 docentes_melted,
                 y='Tipo de Rede',
                x='Quantidade',
                color='N√≠vel de Forma√ß√£o',
                orientation='h',
                color_discrete_map=cores,
                text='Quantidade',
                category_orders={'N√≠vel de Forma√ß√£o': ordem_formacao}  # garante a ordem visual
            )

                fig.update_layout(
                    barmode='stack',
                    xaxis_title=None,
                    yaxis_title=None,
                    legend_title_text=None,
                    font_color='black',
                    legend=dict(
                     font=dict(size=18)  # Tamanho da fonte da legenda
                    )
            )
                fig.update_traces(textposition='inside', texttemplate='%{text:,}')
             # Exibi√ß√£o no Streamlit
                st.plotly_chart(fig, use_container_width=True)

    
        else:
                st.warning("N√£o foi poss√≠vel gerar 'Total de Docentes por N√≠vel de Forma√ß√£o': Colunas de docentes ausentes ou dados filtrados vazios.")


         # 5. Gr√°fico de √Årvore (Treemap): Estrutura das IES por Organiza√ß√£o Acad√™mica (Tamanho e Cor: Livros Eletr√¥nicos)
        if all(col in df_filtrado.columns for col in ["Organiza√ß√£o Acad√™mica", "Total de Livros Eletr√¥nicos"]) and not df_filtrado.empty:
            st.markdown("##### Quantidade de livros eletr√¥nicos por tipo de organiza√ß√£o acad√™mica")
            
            df_treemap_data = df_filtrado.groupby('Organiza√ß√£o Acad√™mica').agg(
                Soma_Livros_Eletronicos=('Total de Livros Eletr√¥nicos', 'sum')
            ).reset_index()
            
            
            fig_treemap_livros = px.treemap(
                 df_treemap_data, 
                path=['Organiza√ß√£o Acad√™mica'], 
                values='Soma_Livros_Eletronicos', 
                color='Soma_Livros_Eletronicos', 
                color_continuous_scale=[(0, "#69ADE4"), (1,"#035AC4")],
                hover_data={'Soma_Livros_Eletronicos': ':.0f'}  # mostra n√∫mero inteiro no hover
            )
            fig_treemap_livros.update_layout(
                margin=dict(t=0, l=0, r=0, b=0),
                uniformtext_minsize=15,  
                uniformtext_mode='show',  # ‚Üê for√ßa mostrar texto dentro dos blocos
                coloraxis_colorbar=dict(
                title='Quantidade de livros eletr√¥nicos'  # ‚Üê t√≠tulo da legenda
                 ),
                height=400
            )       
            fig_treemap_livros.update_traces(
             texttemplate='%{label}<br>%{value:,}',  # ‚Üê mostra nome + n√∫mero dentro do bloco
             marker_line_width=0
            )
            st.plotly_chart(fig_treemap_livros, use_container_width=True) 
        else:
            st.warning("N√£o foi poss√≠vel gerar 'Gr√°fico de √Årvore': Colunas essenciais ausentes ou dados filtrados vazios.")


        # 7. Tabela Detalhada das IES Filtradas (Mantida)
        if not df_filtrado.empty:
            st.markdown("##### Tabela Detalhada das IES Filtradas por Munic√≠pio, Institui√ß√£o e Totais")
            
            group_cols = ['Ano do Censo', 'Munic√≠pio', 'Nome da IES', 'Sigla da IES', 
                          'Organiza√ß√£o Acad√™mica', 'Tipo de Rede', 'Categoria Administrativa']
            
            measures = ['Total de Docentes', 'Total de T√©cnicos']

            if all(col in df_filtrado.columns for col in group_cols + measures):
                ies_summary_table = df_filtrado.groupby(group_cols).agg(
                    Total_de_Docentes=('Total de Docentes', 'sum'),
                    Total_de_Tecnicos=('Total de T√©cnicos', 'sum')
                ).reset_index()

                final_cols = ['Ano do Censo', 'Munic√≠pio', 'Nome da IES', 'Sigla da IES', 
                              'Organiza√ß√£o Acad√™mica', 'Tipo de Rede', 'Categoria Administrativa',
                              'Total_de_Docentes', 'Total_de_Tecnicos']
                
                st.dataframe(ies_summary_table[final_cols])
            else:
                st.warning("N√£o foi poss√≠vel gerar a 'Tabela Detalhada das IES': Colunas essenciais ausentes ou dados filtrados vazios para agrupamento.")

            st.markdown("""
                Esta tabela detalha as Institui√ß√µes de Ensino Superior (IES) com base nos filtros aplicados,
                fornecendo uma vis√£o granular da estrutura educacional por localiza√ß√£o, tipo e dados de pessoal.
            """)
        else:
            st.info("Nenhum dado filtrado para exibir na tabela detalhada das IES.")
       

else:
    st.info("O aplicativo n√£o p√¥de carregar os dados. Verifique a mensagem de erro acima para mais detalhes.")
